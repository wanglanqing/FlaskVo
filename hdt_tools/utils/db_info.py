# -*- coding: utf-8 -*-# @Time    : 2018/2/25 15:38# @Author  : wanglanqingimport MySQLdb# -*- coding: utf-8 -*-# @Time    : 2017/12/13 9:53# @Author  : wanglanqingimport MySQLdbfrom FlaskVv.config import db_configclass DbOperations(object):    '''voyager_test传入True，    voyager_test传入Flase，    doc ,传入env_value = db_config['doc_online']'''    def __init__(self, env_value=True):        if env_value == True:            #测试环境            conf = db_config['voyager_test']            self.db = MySQLdb.connect(host=conf[0],                                      port=conf[1],                                      db=conf[2],                                      user=conf[3],                                      passwd=conf[4],                                      charset=conf[5])        elif env_value == False:            #生产环境            conf = db_config['voyager_online']            self.db = MySQLdb.connect(host=conf[0],                                      port=conf[1],                                      db=conf[2],                                      user=conf[3],                                      passwd=conf[4],                                      charset=conf[5])        else:            conf = db_config['doc_online']            self.db = MySQLdb.connect(host=conf[0],                                      port=conf[1],                                      db=conf[2],                                      user=conf[3],                                      passwd=conf[4],                                      charset=conf[5])        self.cursor = self.db.cursor()    def execute_sql(self, sql):        print '执行的sql是： '+ sql        try:            self.cursor.execute(sql)            self.db.commit()            results = self.cursor.fetchall()            # print results            # , self.cursor.rowcount            return results        except Exception as e:            print e    #执行insert,返回影响行    def exe_insert_sql(self, sql):        print '执行的sql是： ' + sql        try:            self.cursor.execute(sql)            self.db.commit()            return self.cursor.rowcount        except Exception as e:            print e    def len_value(self, sql):        # print '执行的sql是： '+ sql        results = self.execute_sql(sql)        if results == None:            results = 0            return results        else:            return len(results)        sum()    def close_db(self):        self.db.close()    def close_cursor(self):        self.cursor.close()    def mycommit(self):        self.db.commit()    def myrollback(self):        self.db.rollback()if __name__=='__main__':    db = DbOperations()    sql= "INSERT INTO `test`.`testcase_adv` (`id`, `apiname`, `apiState`, `testcasename`, `group`, `status`, `level`, `param_type`, `methodurl`, `param`, `actresult`, `expect_value`, `remarks`) VALUES ('34', '代理商子账号新建/修改接口', '1', 'addOrUpdateAgentSub', 'hdt_demand', '1', '1', 'A', 'http://api.demand.adhudong.com/api/voyager/advertiser/addOrUpdateAgentSub.htm', '{\'name\':\'advagent\',\'password\':\'advagent\',\'contactName\':\'advagent\',\'contactPhone\':\'13121312131\'}', '500', 'Required String parameter \'contactEmail\' is not present', 'Required Params');"    re= db.exe_insert_sql(sql)    print re    print type(re)